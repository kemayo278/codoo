name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, v2.3.1, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        default: ''
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - beta
        default: 'production'

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: SaleBox-Setup
            artifact_name: windows
          - os: macos-latest
            output_name: SalesBox
            artifact_name: macos
          - os: ubuntu-latest
            output_name: SalesBox
            artifact_name: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set version from tag or input
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update package.json version
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "beta" && "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            npm version $VERSION-beta.0 --no-git-tag-version
          else
            npm version $VERSION --no-git-tag-version
          fi
        shell: bash

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run dist -- --mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist -- --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}-artifacts
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          if-no-files-found: warn

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.event.inputs.release_type == 'beta' && format('SalesBox v{0} Beta', needs.build.outputs.version) || format('SalesBox v{0}', needs.build.outputs.version) }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' }}
          files: |
            artifacts/windows-artifacts/*.exe
            artifacts/macos-artifacts/*.dmg
            artifacts/linux-artifacts/*.AppImage
            artifacts/linux-artifacts/*.deb
            artifacts/linux-artifacts/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 